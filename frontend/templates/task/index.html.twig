{% extends 'base.html.twig' %}

{% block title %}To-Do List{% endblock %}

{% block body %}
<div class="container py-5">
  <h1 class="mb-4">Ma To-Do List</h1>

  <div class="input-group mb-4">
    <input type="text" id="taskInput" class="form-control" placeholder="Nouvelle tâche">
    <button class="btn btn-primary" onclick="addTask()">Ajouter</button>
  </div>

  <div id="taskList" class="row g-3">
    <!-- Les tâches seront affichées ici -->
  </div>
</div>

<script>
const API_URL = "/api/tasks";

async function loadTasks() {
  const response = await fetch(API_URL);
  const tasks = await response.json();
  const taskList = document.getElementById("taskList");
  taskList.innerHTML = "";

  tasks.forEach(task => {
    const col = document.createElement("div");
    col.className = "col-md-4";

    const card = document.createElement("div");
    card.className = "card shadow-sm";
    card.style.borderLeft = task.completed ? "5px solid green" : "5px solid #ccc";

    const cardBody = document.createElement("div");
    cardBody.className = "card-body d-flex justify-content-between align-items-center";

    const titleWrapper = document.createElement("div");
    titleWrapper.className = "flex-grow-1";

    const title = document.createElement("span");
    title.textContent = task.title;
    title.className = "task-title";
    title.style.cursor = "pointer";

    if (task.completed) {
      title.style.textDecoration = "line-through";
      title.style.color = "green";
    }

    titleWrapper.appendChild(title);

    if (task.completed) {
      title.style.textDecoration = "line-through";
      title.style.color = "green";
    }

    const btnGroup = document.createElement("div");

    const checkBtn = document.createElement("button");
    checkBtn.className = "btn btn-success btn-sm me-2";
    checkBtn.innerHTML = "✔️";
    checkBtn.onclick = () => toggleComplete(task);

    const editBtn = document.createElement("button");
    editBtn.className = "btn btn-warning btn-sm me-2";
    editBtn.innerHTML = "✏️";
    editBtn.onclick = () => enableInlineEdit(task, title);

    const delBtn = document.createElement("button");
    delBtn.className = "btn btn-danger btn-sm";
    delBtn.innerHTML = "❌";
    delBtn.onclick = () => deleteTask(task.id);

    btnGroup.appendChild(checkBtn);
    btnGroup.appendChild(editBtn);
    btnGroup.appendChild(delBtn);

    cardBody.appendChild(titleWrapper);
    cardBody.appendChild(btnGroup);
    card.appendChild(cardBody);
    col.appendChild(card);
    taskList.appendChild(col);
  });
}

async function addTask() {
  const input = document.getElementById("taskInput");
  const title = input.value.trim();
  if (!title) return;

  await fetch(API_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ title, completed: false })
  });

  input.value = "";
  loadTasks();
}

async function deleteTask(id) {
  await fetch(`${API_URL}/${id}`, { method: "DELETE" });
  loadTasks();
}

async function toggleComplete(task) {
  await fetch(`${API_URL}/${task.id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ ...task, completed: !task.completed })
  });
  loadTasks();
}

function enableInlineEdit(task, spanElement) {
  const input = document.createElement("input");
  input.type = "text";
  input.value = task.title;
  input.className = "form-control form-control-sm";
  input.style.flexGrow = 1;

  spanElement.replaceWith(input);
  input.focus();

  input.addEventListener("keydown", async (e) => {
    if (e.key === "Enter") {
      const newTitle = input.value.trim();
      if (newTitle && newTitle !== task.title) {
        await fetch(`${API_URL}/${task.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ ...task, title: newTitle })
        });
      }
      loadTasks();
    } else if (e.key === "Escape") {
      loadTasks(); // Annule l’édition
    }
  });
}

async function editTask(task) {
  const newTitle = prompt("Modifier la tâche :", task.title);
  if (!newTitle || newTitle.trim() === "") return;

  await fetch(`${API_URL}/${task.id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ ...task, title: newTitle.trim() })
  });

  loadTasks();
}

window.onload = loadTasks;
</script>
{% endblock %}
